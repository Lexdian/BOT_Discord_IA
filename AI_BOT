import io
import re
import discord
from discord.ext import commands
import pathlib
import textwrap
from gtts import gTTS

import markdown
import html2text

import google.generativeai as genai

import os
from dotenv import load_dotenv

load_dotenv()  # Carrega as variáveis do arquivo .env

TOKEN = os.getenv('TOKEN')
API_KEY = os.getenv('API_KEY')



# Definir os intents necessários
intents = discord.Intents.default()  # Usa intents padrão
intents.message_content = True       # Habilita a leitura de conteúdo de mensagens
intents.voice_states = True          # Permite acessar o estado de voz dos membros

# Define os comandos do bot
bot = commands.Bot(command_prefix='!', intents=intents, help_command = None)  # Você pode mudar o prefixo para qualquer outro símbolo
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

def clean_text(text):
    # Remove pseudo-código e formatação específica
    cleaned_text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)  # Remove o bloco da função
    cleaned_text = re.sub(r'`', '', cleaned_text)  # Remove acentos graves
    cleaned_text = re.sub(r'\*\*(.*?)\*\*', r'\1', cleaned_text)  # Remove asteriscos do texto em negrito
    cleaned_text = re.sub(r'\(.*?\)', '', cleaned_text)  # Remove parênteses e seu conteúdo
    cleaned_text = re.sub(r'//.*', '', cleaned_text)  # Remove comentários
    cleaned_text = re.sub(r'Entrada\(".*?"\)', '', cleaned_text)  # Remove as chamadas de entrada
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text)  # Remove espaços extras
    cleaned_text = re.sub(r'^\s+|\s+$', '', cleaned_text)  # Remove espaços em branco no início e no final

    return cleaned_text.strip()  # Retorna o texto limpo
@bot.event
async def on_ready():
    print(f'Bot conectado como {bot.user}')

# Comando simples que responde 'Pong!' ao digitar '!ping'
@bot.command()
async def ping(ctx):
    await ctx.send('Pong!')

# Comando para o bot se conectar ao canal de voz do usuário
@bot.command()
async def join(ctx):
    # Verifica se o autor está conectado a um canal de voz
    if ctx.author.voice is None:
        await ctx.send("Você precisa estar em um canal de voz para me fazer conectar.")
        return False

    # Obtém o canal de voz do autor e faz o bot conectar
    channel = ctx.author.voice.channel
    await channel.connect()
    await ctx.send(f"Conectado ao canal de voz: {channel}")
    return True

# Comando para o bot sair do canal de voz
@bot.command()
async def leave(ctx):
    # Verifica se o bot está em um canal de voz
    if ctx.voice_client is None:
        await ctx.send("Não estou conectado a nenhum canal de voz.")
        return
    
    if ctx.voice_client.is_playing():
        ctx.voice_client.stop()
    # Desconecta o bot
    await ctx.voice_client.disconnect()
    await ctx.send("Desconectado do canal de voz.")

# Comando de ajuda personalizado que também menciona o padrão
@bot.command(name='help')
async def help_command(ctx):
    help_text = (
        "Aqui estão os comandos disponíveis:\n"
        "!ping - Responde com 'Pong!'\n"
        "!help - Mostra esta mensagem de ajuda\n"
        "!Pergunta... - Responde a pergunta usando a IA do google GEMINI"
    )
    await ctx.send(help_text)

@bot.command()
async def Pergunta(ctx, *, pergunta: str):
    try:
        resposta = model.generate_content(pergunta)
        wrapped_response = textwrap.fill(resposta.text, width=200)  # Ajuste a largura conforme necessário
        readable_response = clean_text(wrapped_response)
        print(readable_response)
        print("------------------------------------------------")
        print(wrapped_response)
        await ctx.send(wrapped_response)
        if ctx.voice_client is not None:
            tts = gTTS(text=readable_response, lang='pt-br')
            audio_fp = io.BytesIO()
            tts.write_to_fp(audio_fp)
            audio_fp.seek(0)
            if not ctx.voice_client.is_playing():
                # Toque o áudio
                ctx.voice_client.play(discord.FFmpegPCMAudio(source=audio_fp, pipe=True), after=lambda e: print("Reprodução concluída"))
            else:
                await ctx.send("O bot já está tocando um áudio. Aguarde até que a reprodução atual termine.")
    except Exception as e:
        await ctx.send(f"Ocorreu um erro: {str(e)}")

# Iniciar o bot
bot.run(TOKEN)